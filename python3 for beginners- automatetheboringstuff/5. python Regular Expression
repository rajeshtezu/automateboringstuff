## Regular Expression:
----------------------

-> Regular expressions, called regexes for short, are descriptions for a pattern of text.
Eg: 
\d in a regex stands for a digit character—that is, any single numeral 0 to 9. 

-> for 415-555-1011, regex would be: \d\d\d-\d\d\d-\d\d\d\d
-> But regular expressions can be much more sophisticated. For example, adding a 3 in curly brackets ({3}) after a pattern is like saying, “Match this pattern three times.” So the slightly shorter regex \d{3}-\d{3}-\d{4} also matches the correct phone number format.

# Creating Regex Objects:
-------------------------
-> All the regex functions in Python are in the "re" module.
-> Passing a string value representing your regular expression to re.compile() returns a Regex pattern object (or simply, a Regex object).

-> To create a Regex object that matches the phone number pattern
Eg:
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')

Note: we are using raw string here, so escape sequence won't affect our pattern.


# Matching Regex Objects:
-------------------------

-> A Regex object’s search() method searches the string it is passed for any matches to the regex.
-> The search() method will return None if the regex pattern is not found in the string. If the pattern is found, the search() method returns a Match object.
-> Match objects have a group() method that will return the actual matched text from the searched string.

Eg:
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
>>> mo = phoneNumRegex.search('My number is 415-555-4242.')
>>> print('Phone number found: ' + mo.group())
Phone number found: 415-555-4242

--------------------------------------------------------------------------------------------------------
## More Pattern Matching with Regular Expressions:

# Grouping with Parentheses:
----------------------------

-> Adding parentheses will create groups in the regex: (\d\d\d)-(\d\d\d-\d\d\d\d).
-> Then you can use the group() match object method to grab the matching text from just one group.
-> The first set of parentheses in a regex string will be group 1. The second set will be group 2.
-> By passing the integer 1 or 2 to the group() match object method, you can grab different parts of the matched text. Passing 0 or nothing to the group() method will return the entire matched text.

Eg:
>>> phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
>>> mo = phoneNumRegex.search('My number is 415-555-4242.')
>>> mo.group(1)
'415'
>>> mo.group(2)
'555-4242'
>>> mo.group(0)
'415-555-4242'
>>> mo.group()
'415-555-4242'

->If you would like to retrieve all the groups at once, use the "groups()" method
Eg:
>>> mo.groups()
('415', '555-4242')
>>> areaCode, mainNumber = mo.groups()
>>> print(areaCode)
415
>>> print(mainNumber)
555-4242


-> Parentheses have a special meaning in regular expressions, but what do you do if you need to match a parenthesis in your text?
Eg:
>>> phoneNumRegex = re.compile(r'(\(\d\d\d\)) (\d\d\d-\d\d\d\d)')
>>> mo = phoneNumRegex.search('My phone number is (415) 555-4242.')
>>> mo.group(1)
'(415)'
>>> mo.group(2)
'555-4242'

Note: The \( and \) escape characters in the raw string passed to re.compile() will match actual parenthesis characters.



# Matching Multiple Groups with the Pipe:
-----------------------------------------
 | -> pipe symbol
-> to match one of many expressions.
-> Eg: the regular expression r'Batman|Tina Fey' will match either 'Batman' or 'Tina Fey'.

Note: When both Batman and Tina Fey occur in the searched string, the first occurrence of matching text will be returned as the Match object.

Eg:
>>> heroRegex = re.compile (r'Batman|Tina Fey')
>>> mo1 = heroRegex.search('Batman and Tina Fey.')
>>> mo1.group()
'Batman'

>>> mo2 = heroRegex.search('Tina Fey and Batman.')
>>> mo2.group()
'Tina Fey'

Note: You can find all matching occurrences with the findall() method.

-> You can also use the pipe to match one of several patterns as part of your regex. 

Eg:
>>> batRegex = re.compile(r'Bat(man|mobile|copter|bat)')
>>> mo = batRegex.search('Batmobile lost a wheel')
>>> mo.group()
'Batmobile'
>>> mo.group(1)
'mobile'


# Optional Matching with the Question Mark:
-------------------------------------------

-> The ? character flags the group that precedes it as an optional part of the pattern.

Eg:
>>> batRegex = re.compile(r'Bat(wo)?man')
>>> mo1 = batRegex.search('The Adventures of Batman')
>>> mo1.group()
'Batman'

>>> mo2 = batRegex.search('The Adventures of Batwoman')
>>> mo2.group()
'Batwoman'

Note: If you need to match an actual question mark character, escape it with \?.


# Matching Zero or More with the Star:
--------------------------------------

-> The * (called the star or asterisk) means “match zero or more”

Eg:
>>> batRegex = re.compile(r'Bat(wo)*man')
>>> mo1 = batRegex.search('The Adventures of Batman')
>>> mo1.group()
'Batman'

>>> mo2 = batRegex.search('The Adventures of Batwoman')
>>> mo2.group()
'Batwoman'

>>> mo3 = batRegex.search('The Adventures of Batwowowowoman')
>>> mo3.group()
'Batwowowowoman'


# Matching One or More with the Plus:
-------------------------------------
-> the + (or plus) means “match one or more.

Eg:
>>> batRegex = re.compile(r'Bat(wo)+man')
>>> mo1 = batRegex.search('The Adventures of Batwoman')
>>> mo1.group()
'Batwoman'

>>> mo2 = batRegex.search('The Adventures of Batwowowowoman')
>>> mo2.group()
'Batwowowowoman'

>>> mo3 = batRegex.search('The Adventures of Batman')
>>> mo3 == None
True


# Matching Specific Repetitions with Curly Brackets:
----------------------------------------------------

-> the regex (Ha){3} will match the string 'HaHaHa', but it will not match 'HaHa'.
-> Instead of one number, you can specify a range by writing a minimum, a comma, and a maximum in between the curly brackets. 

Eg: the regex (Ha){3,5} will match 'HaHaHa', 'HaHaHaHa', and 'HaHaHaHaHa'.

-> You can also leave out the first or second number in the curly brackets to leave the minimum or maximum unbounded. For example, (Ha){3,} will match three or more instances of the (Ha) group, while (Ha){,5} will match zero to five instances.

Eg:
>>> haRegex = re.compile(r'(Ha){3}')
>>> mo1 = haRegex.search('HaHaHa')
>>> mo1.group()
'HaHaHa'

>>> mo2 = haRegex.search('Ha')
>>> mo2 == None
True


# Greedy and Nongreedy Matching:
--------------------------------
   Eg: (Ha){3,5}
-> Python’s regular expressions are greedy by default, which means that in ambiguous situations they will match the longest string possible.
-> The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark.

Eg:
>>> greedyHaRegex = re.compile(r'(Ha){3,5}')
>>> mo1 = greedyHaRegex.search('HaHaHaHaHa')
>>> mo1.group()
'HaHaHaHaHa'

>>> nongreedyHaRegex = re.compile(r'(Ha){3,5}?')
>>> mo2 = nongreedyHaRegex.search('HaHaHaHaHa')
>>> mo2.group()
'HaHaHa'

Note: the question mark can have two meanings in regular expressions: declaring a nongreedy match or flagging an optional group. These meanings are entirely unrelated.


# The findall() Method:
-----------------------

-> search() will return a Match object of the first matched text in the searched string, the findall() method will return the strings of every match in the searched string. 

Eg-1:
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
>>> mo = phoneNumRegex.search('Cell: 415-555-9999 Work: 212-555-0000')
>>> mo.group()
'415-555-9999'

On the other hand, findall() will not return a Match object but a list of strings—as long as there are no groups in the regular expression. Each string in the list is a piece of the searched text that matched the regular expression.

Eg-2:
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d') # has no groups
>>> phoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')
['415-555-9999', '212-555-0000']

-> If there are groups in the regular expression, then findall() will return a list of tuples. 

Eg:
>>> phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d)-(\d\d\d\d)') # has groups
>>> phoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')
[('415', '555', '9999'), ('212', '555', '0000')]


# Character Classes:
--------------------


Shorthand	
character
class		Represents
---------	----------
    \d		Any numeric digit from 0 to 9.

    \D		Any character that is not a numeric digit from 0 to 9.

    \w		Any letter, numeric digit, or the underscore character. (Think of this as matching “word” characters.)

    \W		Any character that is not a letter, numeric digit, or the underscore character.

    \s		Any space, tab, or newline character. (Think of this as matching “space” characters.)

    \S		Any character that is not a space, tab, or newline.


-> The character class [0-5] will match only the numbers 0 to 5; this is much shorter than typing (0|1|2|3|4|5).

eg:
>>> xmasRegex = re.compile(r'\d+\s\w+')
>>> xmasRegex.findall('12 drummers, 11 pipers, 10 lords, 9 ladies, 8 maids, 7
swans, 6 geese, 5 rings, 4 birds, 3 hens, 2 doves, 1 partridge')
['12 drummers', '11 pipers', '10 lords', '9 ladies', '8 maids', '7 swans', '6
geese', '5 rings', '4 birds', '3 hens', '2 doves', '1 partridge']


# Making Your Own Character Classes:
------------------------------------

-> There are times when you want to match a set of characters but the shorthand character classes (\d, \w, \s, and so on) are too broad. You can define your own character class using square brackets.

Eg: the character class [aeiouAEIOU] will match any vowel, both lowercase and uppercase.
>>> vowelRegex = re.compile(r'[aeiouAEIOU]')
>>> vowelRegex.findall('Robocop eats baby food. BABY FOOD.')
['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o', 'A', 'O', 'O']

-> You can also include ranges of letters or numbers by using a hyphen.
Eg: character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers.


Note: inside the square brackets, the normal regular expression symbols are not interpreted as such. This means you do not need to escape the ., *, ?, or () characters with a preceding backslash.

Eg: the character class [0-5.] will match digits 0 to 5 and a period. You do not need to write it as [0-5\.].

-> By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class.

Eg:
>>> consonantRegex = re.compile(r'[^aeiouAEIOU]')
>>> consonantRegex.findall('Robocop eats baby food. BABY FOOD.')
['R', 'b', 'c', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd', '.', '
', 'B', 'B', 'Y', ' ', 'F', 'D', '.']


# The Caret and Dollar Sign Characters:
---------------------------------------

-> caret (^)  : starting of regex
-> doller ($) : ending of regex

Eg-1:
>>> beginsWithHello = re.compile(r'^Hello')
>>> beginsWithHello.search('Hello world!')
<_sre.SRE_Match object; span=(0, 5), match='Hello'>
>>> beginsWithHello.search('He said hello.') == None
True

Eg-2:
>>> endsWithNumber = re.compile(r'\d$')
>>> endsWithNumber.search('Your number is 42')
<_sre.SRE_Match object; span=(16, 17), match='2'>
>>> endsWithNumber.search('Your number is forty two.') == None
True

Eg-3:
>>> wholeStringIsNum = re.compile(r'^\d+$')
>>> wholeStringIsNum.search('1234567890')
<_sre.SRE_Match object; span=(0, 10), match='1234567890'>
>>> wholeStringIsNum.search('12345xyz67890') == None
True
>>> wholeStringIsNum.search('12 34567890') == None
True

Note: notice the difference between negative character class and startng of regex with caret (^).


# The Wildcard Character:
-------------------------

->The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline.

Eg:
>>> atRegex = re.compile(r'.at')
>>> atRegex.findall('The cat in the hat sat on the flat mat.')
['cat', 'hat', 'sat', 'lat', 'mat']

Note: the dot character will match just one character, which is why the match for the text flat in the previous example matched only lat.


# Matching Everything with Dot-Star:
------------------------------------

-> any and all text (.*)

Eg:
>>> nameRegex = re.compile(r'First Name: (.*) Last Name: (.*)')
>>> mo = nameRegex.search('First Name: Al Last Name: Sweigart')
>>> mo.group(1)
'Al'
>>> mo.group(2)
'Sweigart'

-> The dot-star uses greedy mode: It will always try to match as much text as possible. To match any and all text in a nongreedy fashion, use the dot, star, and question mark (.*?). 

>>> nongreedyRegex = re.compile(r'<.*?>')
>>> mo = nongreedyRegex.search('<To serve man> for dinner.>')
>>> mo.group()
'<To serve man>'

>>> greedyRegex = re.compile(r'<.*>')
>>> mo = greedyRegex.search('<To serve man> for dinner.>')
>>> mo.group()
'<To serve man> for dinner.>'


# Matching Newlines with the Dot Character:
-------------------------------------------

-> The dot-star will match everything except a newline. By passing re.DOTALL as the second argument to re.compile(), you can make the dot character match all characters, including the newline character.

Eg:
>>> noNewlineRegex = re.compile('.*')
>>> noNewlineRegex.search('Serve the public trust.\nProtect the innocent.
\nUphold the law.').group()
'Serve the public trust.'

>>> newlineRegex = re.compile('.*', re.DOTALL)
>>> newlineRegex.search('Serve the public trust.\nProtect the innocent.
\nUphold the law.').group()
'Serve the public trust.\nProtect the innocent.\nUphold the law.'


# Review of Regex Symbols:
--------------------------

-> The ? matches zero or one of the preceding group.
 
-> The * matches zero or more of the preceding group.

-> The + matches one or more of the preceding group.

-> The {n} matches exactly n of the preceding group.

-> The {n,} matches n or more of the preceding group.

-> The {,m} matches 0 to m of the preceding group.

-> The {n,m} matches at least n and at most m of the preceding group.

-> {n,m}? or *? or +? performs a nongreedy match of the preceding group.

-> ^spam means the string must begin with spam.

-> spam$ means the string must end with spam.

-> The . matches any character, except newline characters.

-> \d, \w, and \s match a digit, word, or space character, respectively.

-> \D, \W, and \S match anything except a digit, word, or space character, respectively.

-> [abc] matches any character between the brackets (such as a, b, or c).

-> [^abc] matches any character that isn’t between the brackets.


# Case-Insensitive Matching:
----------------------------

-> To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile().

Eg:
>>> robocop = re.compile(r'robocop', re.I)
>>> robocop.search('Robocop is part man, part machine, all cop.').group()
'Robocop'

>>> robocop.search('ROBOCOP protects the innocent.').group()
'ROBOCOP'


# Substituting Strings with the sub() Method:
---------------------------------------------

-> The sub() method for Regex objects is passed two arguments. The first argument is a string to replace any matches. The second is the string for the regular expression. The sub() method returns a string with the substitutions applied.

Eg:
>>> namesRegex = re.compile(r'Agent \w+')
>>> namesRegex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.')
'CENSORED gave the secret documents to CENSORED.'

Note: Sometimes you may need to use the matched text itself as part of the substitution. In the first argument to sub(), you can type \1, \2, \3, and so on, to mean “Enter the text of group 1, 2, 3, and so on, in the substitution.”

Eg: say you want to censor the names of the secret agents by showing just the first letters of their names. To do this, you could use the regex Agent (\w)\w* and pass r'\1****' as the first argument to sub(). The \1 in that string will be replaced by whatever text was matched by group 1—that is, the (\w) group of the regular expression.

>>> agentNamesRegex = re.compile(r'Agent (\w)\w*')
>>> agentNamesRegex.sub(r'\1****', 'Agent Alice told Agent Carol that Agent
Eve knew Agent Bob was a double agent.')
A**** told C**** that E**** knew B**** was a double agent.'


# Managing Complex Regexes:
---------------------------

-> Regular expressions are fine if the text pattern you need to match is simple. But matching complicated text patterns might require long, convoluted regular expressions. You can mitigate this by telling the re.compile() function to ignore whitespace and comments inside the regular expression string. This “verbose mode” can be enabled by passing the variable re.VERBOSE as the second argument to re.compile().

Now instead of a hard-to-read regular expression like this:

phoneRegex = re.compile(r'((\d{3}|\(\d{3}\))?(\s|-|\.)?\d{3}(\s|-|\.)\d{4}
(\s*(ext|x|ext.)\s*\d{2,5})?)')

you can spread the regular expression over multiple lines with comments like this:

phoneRegex = re.compile(r'''(
    (\d{3}|\(\d{3}\))?            # area code
    (\s|-|\.)?                    # separator
    \d{3}                         # first 3 digits
    (\s|-|\.)                     # separator
    \d{4}                         # last 4 digits
    (\s*(ext|x|ext.)\s*\d{2,5})?  # extension
    )''', re.VERBOSE)



# Combining re.IGNORECASE, re.DOTALL, and re.VERBOSE:
-----------------------------------------------------

-> re.compile() function takes only a single value as its second argument.

-> So if you want a regular expression that’s case-insensitive and includes newlines to match the dot 
character, you would form your re.compile() call like this:

Eg:
>>> someRegexValue = re.compile('foo', re.IGNORECASE | re.DOTALL)

-> All three options for the second argument will look like this:


>>> someRegexValue = re.compile('foo', re.IGNORECASE | re.DOTALL | re.VERBOSE)

----------------------------------------------The End------------------------------------------------------










































