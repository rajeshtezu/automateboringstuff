## The upper(), lower(), isupper(), and islower() String Methods:
-----------------------------------------------------------------
-> The upper() and lower() string methods return a new string where all the letters in the original string have been converted to uppercase or lower-case, respectively. 

Eg:
>>> spam = 'Hello world!'
>>> spam = spam.upper()
>>> spam
'HELLO WORLD!'
>>> spam = spam.lower()
>>> spam
'hello world!'

-> The isupper() and islower() methods will return a Boolean True value if the string has at least one letter and all the letters are uppercase or lowercase, respectively. 

Eg:
>>> spam = 'Hello world!'
>>> spam.islower()
False
>>> spam.isupper()
False
>>> 'HELLO'.isupper()
True
>>> 'abc12345'.islower()
True
>>> '12345'.islower()
False
>>> '12345'.isupper()
False

# The isX String Methods:
-------------------------
Along with isupper() and islower(), there are many

-> isalpha() returns True if the string consists only of letters and is not blank.

-> isalnum() returns True if the string consists only of letters and numbers and is not blank.

-> isdecimal() returns True if the string consists only of numeric characters and is not blank.

-> isspace() returns True if the string consists only of spaces, tabs, and new-lines and is not blank.

-> istitle() returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters.


Note: The isX string methods are helpful when you need to validate user input. 

# The startswith() and endswith() String Methods:
-------------------------------------------------

Eg:
>>> 'Hello world!'.startswith('Hello')
True
>>> 'Hello world!'.endswith('world!')
True
>>> 'abc123'.startswith('abcdef')
False
>>> 'abc123'.endswith('12')
False
>>> 'Hello world!'.startswith('Hello world!')
True
>>> 'Hello world!'.endswith('Hello world!')
True

# The join() and split() String Methods:
----------------------------------------

-> The join() method is useful when you have a list of strings that need to be joined together into a single string value. The join() method is called on a string, gets passed a list of strings, and returns a string. The returned string is the concatenation of each string in the passed-in list.

Eg:
>>> ', '.join(['cats', 'rats', 'bats'])
'cats, rats, bats'
>>> ' '.join(['My', 'name', 'is', 'Simon'])
'My name is Simon'
>>> 'ABC'.join(['My', 'name', 'is', 'Simon'])
'MyABCnameABCisABCSimon'

->  The split() method does the opposite: It’s called on a string value and returns a list of strings. 

Eg-1:
>>> 'My name is Simon'.split()
['My', 'name', 'is', 'Simon']

Note: You can pass a delimiter string to the split() method to specify a different string to split upon.
Eg-2:
>>> 'MyABCnameABCisABCSimon'.split('ABC')
['My', 'name', 'is', 'Simon']
>>> 'My name is Simon'.split('m')
['My na', 'e is Si', 'on']

-> A common use of split() is to split a multiline string along the newline characters.

Eg:
>>> spam = '''Dear Alice,
How have you been? I am fine.
There is a container in the fridge
that is labeled "Milk Experiment".

Please do not drink it.
Sincerely,
Bob'''
>>> spam.split('\n')
['Dear Alice,', 'How have you been? I am fine.', 'There is a container in the
fridge', 'that is labeled "Milk Experiment".', '', 'Please do not drink it.',
'Sincerely,', 'Bob']

# Justifying Text with rjust(), ljust(), and center():
------------------------------------------------------
-> The rjust() and ljust() string methods return a padded version of the string they are called on, with spaces inserted to justify the text. The first argument to both methods is an integer length for the justified string.

->An optional second argument to rjust() and ljust() will specify a fill character other than a space character.

Eg-1:
>>> 'Hello'.rjust(10)
'     Hello'
>>> 'Hello'.rjust(20)
'               Hello'
>>> 'Hello World'.rjust(20)
'         Hello World'
>>> 'Hello'.ljust(10)
'Hello     '

Here, 'Hello'.rjust(10) says that we want to right-justify 'Hello' in a string of total length 10.

Eg-2:
>>> 'Hello'.rjust(20, '*')
'***************Hello'
>>> 'Hello'.ljust(20, '-')
'Hello---------------'

-> The center() string method works like ljust() and rjust() but centers the text rather than justifying it to the left or right.

Eg:
>>> 'Hello'.center(20)
'       Hello       '
>>> 'Hello'.center(20, '=')
'=======Hello========'

Note: These methods are especially useful when you need to print tabular data that has the correct spacing.

Eg:
def printPicnic(itemsDict, leftWidth, rightWidth):
    print('PICNIC ITEMS'.center(leftWidth + rightWidth, '-'))
    for k, v in itemsDict.items():
        print(k.ljust(leftWidth, '.') + str(v).rjust(rightWidth))
picnicItems = {'sandwiches': 4, 'apples': 12, 'cups': 4, 'cookies': 8000}
printPicnic(picnicItems, 12, 5)
printPicnic(picnicItems, 20, 6)

o/p:
---PICNIC ITEMS--
sandwiches..    4
apples......   12
cups........    4
cookies..... 8000
-------PICNIC ITEMS-------
sandwiches..........     4
apples..............    12
cups................     4
cookies.............  8000

# Removing Whitespace with strip(), rstrip(), and lstrip():
-----------------------------------------------------------

-> The strip() string method will return a new string without any whitespace characters at the beginning or end. The lstrip() and rstrip() methods will remove whitespace characters from the left and right ends, respectively.

Eg:
>>> spam = '    Hello World     '
>>> spam.strip()
'Hello World'
>>> spam.lstrip()
'Hello World     '
>>> spam.rstrip()
'    Hello World'

-> Optionally, a string argument will specify which characters on the ends should be stripped. 

Eg:
>>> spam = 'SpamSpamBaconSpamEggsSpamSpam'
>>> spam.strip('ampS')
'BaconSpamEggs'

Note: Passing strip() the argument 'ampS' will tell it to strip occurences of a, m, p, and capital S from the ends of the string stored in spam. The order of the characters in the string passed to strip() does not matter: strip('ampS') will do the same thing as strip('mapS') or strip('Spam').

# Copying and Pasting Strings with the pyperclip Module:
--------------------------------------------------------

-> The pyperclip module has copy() and paste() functions that can send text to and receive text from your computer’s clipboard. Sending the output of your program to the clipboard will make it easy to paste it to an email, word processor, or some other software.

Install pyperclip using pip

Eg:
>>> import pyperclip
>>> pyperclip.copy('Hello world!')
>>> pyperclip.paste()
'Hello world!'

Note: if something outside of your program changes the clipboard contents, the paste() function will return it. For example, if I copied this sentence to the clipboard and then called paste(), it would look like this:

>>> pyperclip.paste()
'For example, if I copied this sentence to the clipboard and then called
paste(), it would look like this:'


-----------------------------------------------------The End----------------------------------------------------




















