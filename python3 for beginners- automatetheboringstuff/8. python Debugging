# Debugging:
------------

# Raising Exceptions:
---------------------
-> Raising an exception is a way of saying, “Stop running the code in this function and move the program execution to the 
   except statement.”

   Eg:
   >>> raise Exception('This is the error message.')
   Traceback (most recent call last):
     File "<pyshell#191>", line 1, in <module>
       raise Exception('This is the error message.')
   Exception: This is the error message.

-> We commonly see a raise statement inside a function and the try and except statements in the code calling the function.

   Eg: 
   def boxPrint(symbol, width, height):
       if len(symbol) != 1:
❶         raise Exception('Symbol must be a single character string.')
       if width <= 2:
❷         raise Exception('Width must be greater than 2.')
       if height <= 2:
❸         raise Exception('Height must be greater than 2.')
       print(symbol * width)
       for i in range(height - 2):
           print(symbol + (' ' * (width - 2)) + symbol)
       print(symbol * width)

   for sym, w, h in (('*', 4, 4), ('O', 20, 5), ('x', 1, 3), ('ZZ', 3, 3)):
       try:
           boxPrint(sym, w, h)
❹     except Exception as err:
❺         print('An exception happened: ' + str(err))



# Getting the Traceback as a String:
------------------------------------
-> When Python encounters an error, it produces a treasure trove of error information called the traceback. The traceback 
   includes the error message, the line number of the line that caused the error, and the sequence of the function calls 
   that led to the error. This sequence of calls is called the call stack.

   Eg:
   errorExample.py:
   ----------------
   def spam():
       bacon()
   def bacon():
       raise Exception('This is the error message.')
   
   spam()
   
   --> When you run errorExample.py, the output will look like this:
     
   Traceback (most recent call last):
     File "errorExample.py", line 7, in <module>
       spam()
     File "errorExample.py", line 2, in spam
       bacon()
     File "errorExample.py", line 5, in bacon
       raise Exception('This is the error message.')
   Exception: This is the error message.

-> Instead of displaying the traceback message we can strore it as a string in a log file using traceback.format_exc()
   
   Eg:
   >>> import traceback
   >>> try:
            raise Exception('This is the error message.')
   except:
            errorFile = open('errorInfo.txt', 'w')
            errorFile.write(traceback.format_exc())
            errorFile.close()
            print('The traceback info was written to errorInfo.txt.')
   
   116	----->  return value from the write() method
   The traceback info was written to errorInfo.txt.


# Assertions:
-------------
-> An assertion is a sanity check to make sure your code isn’t doing something obviously wrong. If the sanity check fails, 
   then an AssertionError exception is raised.

   Syntax:	assert <condition>, <A string to display when the condition is False>

   Eg:
   >>> mst = 'open'
   >>> assert mst=='open', 'this should open'
   >>> assert mst=='ope', 'this should open'
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
   AssertionError: this should open

Note: Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your 
	  program should crash. Since it is for programmer error, it is used to debug program. This will reduce the amount of 
	  code you will have to check before finding the code that’s causing the bug.


# Disabling Assertions:
-----------------------
-> pass the -O option when running Python.

Eg: python -O temp.py


# Logging:
----------

 # Using the logging Module:
 ---------------------------
 -> To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of 
    your program.

    import logging
    logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s
    - %(message)s')

    -> it creates a LogRecord object that holds information about that event.
    -> basicConfig() function lets you specify what details about the LogRecord object you want to see and how you want those 
       details displayed.

    Note: You don’t need to worry too much about how this works.

    Eg:
    import logging
    logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s
    - %(message)s')
    logging.debug('Start of program')
    
    def factorial(n):
        logging.debug('Start of factorial(%s)' % (n))
        total = 1
        for i in range(n + 1):
            total *= i
            logging.debug('i is ' + str(i) + ', total is ' + str(total))
        logging.debug('End of factorial(%s)' % (n))
        return total
    
    print(factorial(5))
    logging.debug('End of program') 

      -> debug() function will call basicConfig(), and a line of information will be printed.
      -> information will be in the format we specified in basicConfig() and will include the messages we passed to debug().
      -> There is a bug [range(1, n + 1)] in the above program and we can find that using the generated log file as follows:
      
      O/P:
      ----
      2017-08-13 12:09:41,087 - DEBUG - Start of program
      2017-08-13 12:09:41,087 - DEBUG - Start of factorial(5)
      2017-08-13 12:09:41,087 - DEBUG - i is 0, total is 0
      2017-08-13 12:09:41,087 - DEBUG - i is 1, total is 0
      2017-08-13 12:09:41,088 - DEBUG - i is 2, total is 0
      2017-08-13 12:09:41,088 - DEBUG - i is 3, total is 0
      2017-08-13 12:09:41,088 - DEBUG - i is 4, total is 0
      2017-08-13 12:09:41,088 - DEBUG - i is 5, total is 0
      2017-08-13 12:09:41,088 - DEBUG - End of factorial(5)
      factorail of 5 is :0
      2017-08-13 12:09:41,088 - DEBUG - End of program


 # Don’t Debug with print():
 ---------------------------
 -> The nice thing about log messages is that you’re free to fill your program with as many as you like, and you can always disable 
    them later by adding a single "logging.disable(logging.CRITICAL)" call. Unlike print(), the logging module makes it easy to 
    switch between showing and hiding log messages.

 -> Simply pass logging.disable() a logging level, and it will suppress all log messages at that level or lower.
 

 # Logging Levels:
 -----------------
 -> Logging levels provide a way to categorize your log messages by importance.

    From least to most important:

    Level       Logging Function
    -----       ----------------
    DEBUG       logging.debug()
    INFO        logging.info()
    WARNING     logging.warning()
    ERROR       logging.error()
    CRITICAL    logging.critical()

    Eg:
    >>> import logging
    >>> logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s -
    %(levelname)s - %(message)s')
    >>> logging.debug('Some debugging details.')
    2015-05-18 19:04:26,901 - DEBUG - Some debugging details.
    >>> logging.info('The logging module is working.')
    2015-05-18 19:04:35,569 - INFO - The logging module is working.
    >>> logging.warning('An error message is about to be logged.')
    2015-05-18 19:04:56,843 - WARNING - An error message is about to be logged.
    >>> logging.error('An error has occurred.')
    2015-05-18 19:05:07,737 - ERROR - An error has occurred.
    >>> logging.critical('The program is unable to recover!')
    2015-05-18 19:05:45,794 - CRITICAL - The program is unable to recover!

    Note: Passing logging.DEBUG to the basicConfig() function’s level keyword argument will show messages from all the logging 
          levels (DEBUG being the lowest level). 


 # Logging to a File:
 --------------------

  Eg:
  import logging
  logging.basicConfig(filename='myProgramLog.txt', level=logging.DEBUG, format='
  %(asctime)s - %(levelname)s - %(message)s')


# IDLE’s Debugger:
------------------
-> Useful when we want to run one line of code at a time.
-> click Debug▸Debugger in the interactive shell window.
-> select all four of the Stack, Locals, Source, and Globals checkboxes so that the window shows the full set of debug information.
-> The program will stay paused until you press one of the five buttons in the Debug Control window: 
  Go, Step, Over, Out, or Quit.


# Breakpoints:
--------------
-> right click on a line and select "set breakpoint", then run the program under debug mode and click on "go" to execute the program
   at full speed, it will only pause at breakpoint.


-------------------------------------------------------The End----------------------------------------------------------------------

