# Sending Email and Text Messages:
----------------------------------

# SMTP:
-------
-> to send mail
-> module: smtplib
-> IMAP used to retrieve mail.

 # Sending Email:
 ----------------
 
  # Connecting to an SMTP Server:
  -------------------------------
  -> list of few smtp service provider. 
  -> port no. used:  587
  
      Provider                    SMTP server domain name
      --------                    -----------------------
      Gmail                        smtp.gmail.com
      Outlook.com/Hotmail.com      smtp-mail.outlook.com
      Yahoo Mail                   smtp.mail.yahoo.com


  -> The SMTP object represents a connection to an SMTP mail server and has methods for sending emails.
  
     Eg:
     >>> smtpObj = smtplib.SMTP('smtp.gmail.com', 587)
     >>> type(smtpObj)
     <class 'smtplib.SMTP'> 

    Note: If the smtplib.SMTP() call is not successful, your SMTP server might not support TLS on port 587. In 
          this case, you will need to create an SMTP object using smtplib.SMTP_SSL() and port 465 instead.


  # Sending the SMTP “Hello” Message:
  -----------------------------------
  -> ehlo() : method to establish a connection to the server by sending hello message.
  -> Just be sure to call the ehlo() method first thing after getting the SMTP object or else the later method 
     calls will result in errors.

    Eg:
    >>> smtpObj.ehlo()
    (250, b'smtp.gmail.com at your service, [13.64.199.16]\nSIZE          
    35882577\n8BITMIME\nSTARTTLS\nENHANCEDSTATUSCODES\nPIPELINING\nCHUNKING\nSMTPUTF8')

    Note: 250 in tuple is success code.


  # Starting TLS Encryption:
  --------------------------
  -> Next we need to call starttls() method.
  -> This required step enables encryption for your connection.
  -> If you are connecting to port 465 (using SSL), then encryption is already set up, and you should skip 
     this step.
     
     Eg:
     >>> smtpObj.starttls()
     (220, b'2.0.0 Ready to start TLS')
     
     Note: The 220 in the return value tells you that the server is ready.
     
     
  # Logging in to the SMTP Server:
  --------------------------------
    Eg:
    >>> smtpObj.login(' my_email_address@gmail.com ', ' MY_SECRET_PASSWORD ')
    (235, b'2.7.0 Accepted')

    Note: The 235 in the return value means authentication was successful.
          Python will raise an smtplib.SMTPAuthenticationError exception for incorrect passwords.


  # Sending an Email:
  -------------------
  -> sendmail() : After successful login we can use this method to send mail.
     Return value is dictionary. For every failed delivery one key-value pair. Empty dictionary means all success.
      
     Eg:
     >>> smtpObj.sendmail(' my_email_address@gmail.com ', ' recipient@example.com ',
        'Subject: So long.\nDear Alice, so long and thanks for all the fish. Sincerely,Bob')
     {}

      Arguments:
      1. Your email address as a string (for the email’s “from” address)
      2. The recipient’s email address as a string or a list of strings for multiple recipients (for the “to” 
         address)
      3. The email body as a string
      
      Note: The start of the email body string must begin with 'Subject: \n' for the subject line of the email. 
            The '\n' newline character separates the subject line from the main body of the email.


  # Disconnecting from the SMTP Server:
  -------------------------------------
  Eg:
  >>> smtpObj.quit()
  (221, b'2.0.0 closing connection ko10sm23097611pbd.52 - gsmtp')
  
  Note: The 221 in the return value means the session is ending.
---------------------------------------------------------------------------------------------------------------------------


# IMAP:
-------
-> Internet Message Access Protocol (IMAP) specifies how to communicate with an email provider’s server to retrieve emails 
   sent to your email address.
-> Python module : imaplib
-> Third party python module: "imapclient" (Easy to use, this one discussed in this chapter)
                              * downloads emails from an IMAP server in a complicated format.
                              * "pyzmail36" module does the hard job of parsing these email messages for us. 

-> install packages: pip3 install imapclient pyzmail36
-> import imapclient, pyzmail 


 # Retrieving and Deleting Emails with IMAP:
 -------------------------------------------
 
  # Connecting to an IMAP Server:
  -------------------------------

      provider                  IMAP server domain name
      --------                  -----------------------
      Gmail                     imap.gmail.com
      Outlook.com/Hotmail.com   imap-mail.outlook.com
      Yahoo Mail                imap.mail.yahoo.com


  -> create an IMAPClient object. Most email providers require SSL encryption, so pass the ssl=True keyword argument.
     Eg:
     >>> import imapclient
     >>> imapObj = imapclient.IMAPClient('imap.gmail.com', ssl=True)


  # Logging in to the IMAP Server:
  --------------------------------

  Eg:
  >>> imapObj.login(' my_email_address@gmail.com ', ' MY_SECRET_PASSWORD ')
  'my_email_address@gmail.com Jane Doe authenticated (Success)'

  -> raise imaplib.error exception if username/password are incorrect.


  # Searching for Email:
  ----------------------

   # Selecting a Folder:
   ---------------------
   -> list_folders() : returns list tuples of folders. Each tuple contains information about a single folder.
      ie; INBOX,Drafts, etc
 
      Eg:
      >>> import pprint
      >>> pprint.pprint(imapObj.list_folders())
      [(('\\HasNoChildren',), '/', 'Drafts'),
       (('\\HasNoChildren',), '/', 'Filler'),
       (('\\HasNoChildren',), '/', 'INBOX')
       --snip-
      ]
 
   -> select a folder
 
      Eg:
      >>> imapObj.select_folder('INBOX', readonly=True)
 
          -> will raise an imaplib.error exception if searched folder doesn't exist.
 

   # Performing the Search:
   ------------------------
   -> search() : argument passed is list of strings. Returns UIDs. Pass these UIDs to fetch() method to obtain the email 
      content.

   -> Search key: 'ALL', 
                  'BEFORE date', 'ON date', 'SINCE date'
                  'SUBJECT string', 'BODY string', 'TEXT string'
                  'FROM string', 'TO string', 'CC string', 'BCC string'
                  'SEEN', 'UNSEEN'
                  'ANSWERED', 'UNANSWERED'
                  'DELETED', 'UNDELETED'
                  'DRAFT', 'UNDRAFT'
                  'FLAGGED', 'UNFLAGGED'
                  'LARGER N', 'SMALLER N'
                  'NOT search-key'
                  'OR search-key1 search-key2'

   -> We can pass multiple IMAP search key strings in the list argument to the search() method. The messages returned are 
      the ones that match all the search keys.
   -> If you want to match any of the search keys, use the OR search key. For the NOT and OR search keys, one and two 
      complete search keys follow the NOT and OR, respectively.

      Eg:
      imapObj.search(['ALL'])
      imapObj.search(['SINCE 01-Jan-2015', 'BEFORE 01-Feb-2015', 'UNSEEN'])   etc


   # Size Limits:
   --------------

   Eg:
   >>> import imaplib
   >>> imaplib._MAXLINE = 10000000

   Note: We can change this limit from 10,000 bytes to 10,000,000 bytes.
   -> raise "imaplib.error: got more than 10000 bytes" exception if search matches a large number of email messages.

   -> If we are using gmail account we can use gmail's more sophisticated search engine.

      Eg:
      >>> UIDs = imapObj.gmail_search('meaning of life')
      >>> UIDs
      [42]


   # Fetching an Email and Marking It As Read:
   -------------------------------------------
   -> fetch(<list of UIDs>, <list ['BODY[]']>) : Used to fetch Email. 
      * Returns nested dictionary of messages with UIDs as the keys.
      * Each message is stored as a dictionary with two keys: 'BODY[]' and 'SEQ'. The 'BODY[]' key maps to the 
        actual body of the email. The 'SEQ' key is for a sequence number, which has a similar role to the UID. You 
        can safely ignore it.
      * list ['BODY[]'], tells fetch() to download all the body content for the emails specified in your UID list.

      Eg:
      >>> rawMessages = imapObj.fetch(UIDs, ['BODY[]'])
      >>> import pprint
      >>> pprint.pprint(rawMessages)
      {40040: {'BODY[]': 'Delivered-To: my_email_address@gmail.com\r\n'
                         'Received: by 10.76.71.167 with SMTP id '
      --snip--
                         '\r\n'
                         '------=_Part_6000970_707736290.1404819487066--\r\n',
               'SEQ': 5430}}

    -> To show emails to be marked as read when you fetch them use "readonly=False".
       Eg:
       >>> imapObj.select_folder('INBOX', readonly=False)


    # Getting Email Addresses from a Raw Message:
    ---------------------------------------------
    -> The pyzmail module parses these raw messages and returns them as PyzMessage objects, which make the 
       subject, body, “To” field, “From” field, and other sections of the email easily accessible to python.

       Eg:
       >>> import pyzmail
       >>> message = pyzmail.PyzMessage.factory(rawMessages[40041]['BODY[]'])

    -> Now get different parts of message
    
       Eg:
       >>> message.get_subject()
       'Hello!'
       >>> message.get_addresses('from')
       [('Edward Snowden', 'esnowden@nsa.gov')]    --> name associated with the email address, and the email 
       >>> message.get_addresses('to')                 address itself.
       [(Jane Doe', 'my_email_address@gmail.com')]
       >>> message.get_addresses('cc')
       []
       >>> message.get_addresses('bcc')
       []


    # Getting the Body from a Raw Message:
    --------------------------------------
    -> text_part : to get text part of mail.
    -> html_part : to get html part of mail if body contains html text as well.
    -> text_part.get_payload() : returns the email’s body as a value of the bytes data type.
    -> decode()  : Returns string of bytes data type.
    
    Eg:
    >>> message.text_part != None
    True
    >>> message.text_part.get_payload().decode(message.text_part.charset)
    'So long, and thanks for all the fish!\r\n\r\n-Al\r\n'
    >>> message.html_part != None
    True
    >>> message.html_part.get_payload().decode(message.html_part.charset)
    '<div dir="ltr"><div>So long, and thanks for all the fish!<br><br></div>-Al
    <br></div>\r\n'


    # Deleting Emails:
    ------------------
    
    Eg:
    >>> imapObj.select_folder('INBOX', readonly=False)
    >>> UIDs = imapObj.search(['ON 09-Jul-2015'])
    >>> UIDs
    [40066]
    >>> imapObj.delete_messages(UIDs) ----> marks the emails with the \Deleted flag.
    {40066: ('\\Seen', '\\Deleted')}
    >>> imapObj.expunge()           ------> permanently delete all emails with the \Deleted flag.
    ('Success', [(5452, 'EXISTS')])
    
    
    # Disconnecting from the IMAP Server:
    -------------------------------------
    Eg:
    >>> imapObj.logout()
    
    Summary:
    ------------------------------------------------------------------------------------------------
    >>> import imapclient
    >>> imapObj = imapclient.IMAPClient('imap.gmail.com', ssl=True)
    >>> imapObj.login(' my_email_address@gmail.com ', ' MY_SECRET_PASSWORD ')
    'my_email_address@gmail.com Jane Doe authenticated (Success)'
    >>> imapObj.select_folder('INBOX', readonly=True)
    >>> UIDs = imapObj.search(['SINCE 05-Jul-2014'])
    >>> UIDs
    [40032, 40033, 40034, 40035, 40036, 40037, 40038, 40039, 40040, 40041]
    >>> rawMessages = imapObj.fetch([40041], ['BODY[]', 'FLAGS'])
    >>> import pyzmail
    >>> message = pyzmail.PyzMessage.factory(rawMessages[40041]['BODY[]'])
    >>> message.get_subject()
    'Hello!'
    >>> message.get_addresses('from')
    [('Edward Snowden', 'esnowden@nsa.gov')]
    >>> message.get_addresses('to')
    [(Jane Doe', 'jdoe@example.com')]
    >>> message.get_addresses('cc')
    []
    >>> message.get_addresses('bcc')
    []
    >>> message.text_part != None
    True
    >>> message.text_part.get_payload().decode(message.text_part.charset)
    'Follow the money.\r\n\r\n-Ed\r\n'
    >>> message.html_part != None
    True
    >>> message.html_part.get_payload().decode(message.html_part.charset)
    '<div dir="ltr"><div>So long, and thanks for all the fish!<br><br></div>-
    Al<br></div>\r\n'
    >>> imapObj.logout()
    ----------------------------------------------------------------------------------------------------------
    
    
# Sending Text Messages with Twilio:
------------------------------------
-> Link: https://www.twilio.com/docs/quickstart/python/sms#faq






















    
    
