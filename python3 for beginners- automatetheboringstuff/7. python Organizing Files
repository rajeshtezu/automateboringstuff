# Organizing Files:
-------------------

# The shutil Module:
--------------------
-> The shutil (or shell utilities) module has functions to let you copy, move, rename, and delete files in your 
   Python programs.
   
 # Copying Files and Folders:
 ----------------------------
 -> The shutil module provides functions for copying files, as well as entire folders.
 
 1. shutil.copy(source, destination) : will copy the file at the path source to the folder at the path 
    destination.
    
    Note: 
    1. Both source and destination are strings
    2. If destination is a filename, it will be used as the new name of the copied file.
    3. This function returns a string of the path of the newly copied file.
    
    Eg:
     >>> import shutil, os
     >>> os.chdir('C:\\')
     >>> shutil.copy('C:\\spam.txt', 'C:\\delicious')
     'C:\\delicious\\spam.txt'
     >>> shutil.copy('eggs.txt', 'C:\\delicious\\eggs2.txt')
     'C:\\delicious\\eggs2.txt'

 2. shutil.copytree(source, destination) : will copy an entire folder and every folder and file contained in it.
     
    Note: The function returns a string of the path of the copied folder.
    
    Eg:
    >>> import shutil, os
    >>> os.chdir('C:\\')
    >>> shutil.copytree('C:\\bacon', 'C:\\bacon_backup')
    'C:\\bacon_backup'
 
    
 # Moving and Renaming Files and Folders:
 ----------------------------------------
 -> shutil.move(source, destination) : moves the file or folder at the path source to the path destination, 
    returns a string of the absolute path of the new location.
    
    Eg-1:
    >>> import shutil
    >>> shutil.move('C:\\bacon.txt', 'C:\\eggs')
    'C:\\eggs\\bacon.txt'
    
    Eg-2: Here destination file will be overwritten with the content of source file.
    >>> shutil.move('C:\\bacon.txt', 'C:\\eggs\\new_bacon.txt')
    'C:\\eggs\\new_bacon.txt'
    
    Eg-3: Here 'eggs' will be assumed as filename, not folder name if folder 'eggs' doesn't exist.
    >>> shutil.move('C:\\bacon.txt', 'C:\\eggs')
    'C:\\eggs'
    
    Note: if the destination folder doesn't exist, python will throw 'FileNotFoundError' exception.
    

 # Permanently Deleting Files and Folders:
 -----------------------------------------
 -> single file or empty folder can be deleted by functions in os module, but to delete folder with content we use
    shutil module.
 
 -> os.unlink(path) : delete the file at path.
 -> os.rmdir(path) : delete the folder at path. This folder must be empty.
 -> shutil.rmtree(path) : delete folder (containing other file or folder) at path.
 
 Note: Be careful while using these functions.
 
    Eg:
    import os
    for filename in os.listdir():
        if filename.endswith('.rxt'):
            #os.unlink(filename)
            print(filename)


 # Safe Deletes with the send2trash Module:
 ------------------------------------------
 -> install this module: $pip install send2trash
 -> sends file/folder to recycle bin instead of permanent delete.
 
    Eg:
    >>> import send2trash
    >>> baconFile = open('bacon.txt', 'a') # creates the file
    >>> baconFile.write('Bacon is not a vegetable.')
    25
    >>> baconFile.close()
    >>> send2trash.send2trash('bacon.txt')


 # Walking a Directory Tree:
 ---------------------------
 -> os.walk() : walks through all the files, subfolder, files inside subfolder and so on, of a folder.
 
    Eg:
    import os
   
    for folderName, subfolders, filenames in os.walk('C:\\delicious'):
        print('The current folder is ' + folderName)
    
        for subfolder in subfolders:
            print('SUBFOLDER OF ' + folderName + ': ' + subfolder)
        for filename in filenames:
            print('FILE INSIDE ' + folderName + ': '+ filename)
    
        print('')

 -> os.walk() function returns three values on each iteration through the loop:    
     1. A string of the current folder’s name
     2. A list of strings of the folders in the current folder
     3. A list of strings of the files in the current folder


 # Compressing Files with the zipfile Module:
 --------------------------------------------
 -> We can create and open (or extract) ZIP files using functions in the zipfile module.
 
   # Reading ZIP Files:
   --------------------
   -> To read zip file we need a ZipFile object.
      
      Eg:
      >>> import zipfile, os
      >>> os.chdir('C:\\')    # move to the folder with example.zip
      >>> exampleZip = zipfile.ZipFile('example.zip')
      >>> exampleZip.namelist()
      ['spam.txt', 'cats/', 'cats/catnames.txt', 'cats/zophie.jpg']
      >>> spamInfo = exampleZip.getinfo('spam.txt')
      >>> spamInfo.file_size
      13908    ------------------------------> size in bytes
      >>> spamInfo.compress_size
      3828
      >>> 'Compressed file is %sx smaller!' % (round(spamInfo.file_size / spamInfo
      .compress_size, 2))
      'Compressed file is 3.63x smaller!'
      >>> exampleZip.close()


   # Extracting from ZIP Files:
   ----------------------------
   -> The extractall() method for ZipFile objects extracts all the files and folders from a ZIP file into the 
      current working directory.
      
      Eg:
      >>> import zipfile, os
      >>> os.chdir('C:\\')    # move to the folder with example.zip
      >>> exampleZip = zipfile.ZipFile('example.zip')
  1.) >>> exampleZip.extractall()
      >>> exampleZip.close()

      Note: We can use exampleZip.extractall('C:\\ delicious') at 1.) to extract content in a particular folder 
      (not current directory), if the passed dir name doesn't exist it will be created.
      
   -> extract() method for ZipFile objects will extract a single file from the ZIP file.
      
      Eg:
      >>> exampleZip.extract('spam.txt')
      'C:\\spam.txt'
      >>> exampleZip.extract('spam.txt', 'C:\\some\\new\\folders')
      'C:\\some\\new\\folders\\spam.txt'
      >>> exampleZip.close()
      
      Note: Optionally, you can pass a second argument to extract() to extract the file into a folder other than 
      the current working directory. If this second argument is a folder that doesn’t yet exist, Python will 
      create the folder.
   

   # Creating and Adding to ZIP Files:
   -----------------------------------
   -> To create our own zip file open the ZipFile object in write mode by passing 'w' as the second argument.
   
      Eg:
      >>> import zipfile
      >>> newZip = zipfile.ZipFile('new.zip', 'w')
      >>> newZip.write('spam.txt', compress_type=zipfile.ZIP_DEFLATED)
      >>> newZip.close()

      Note: write mode ('w') will erase existing zip file contents. We can use append mode ('a') to add new 
      content to existing zip file.
      




















