## Working with Excel Spreadsheets:
-----------------------------------
-> "openpyxl" module allows python to read and modify excell sheets.
 
 # Excel Documents:
 ------------------
 -> An Excel spreadsheet document is called a workbook.
 -> A single workbook is saved in a file with the .xlsx extension.
 -> Each workbook can contain multiple sheets (also called worksheets).
 -> The sheet the user is currently viewing (or last viewed before closing Excel) is called the active sheet.
 -> Each sheet has columns (addressed by letters starting at A) and rows (addressed by numbers starting at 1).

-> install openpyxl:    $pip3 install openpyxl


# Reading Excel Documents:
--------------------------
-> Create an example.xlsx as shown in book.
 
 
 # Opening Excel Documents with OpenPyXL:
 ----------------------------------------
 -> openpyxl.load_workbook() function takes in the filename and returns a value of the workbook data type.
 
    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.load_workbook('example.xlsx')
    >>> type(wb)
    <class 'openpyxl.workbook.workbook.Workbook'>
 
 
 # Getting Sheets from the Workbook:
 -----------------------------------
 -> get_sheet_names(): returns a list of all the sheet names in the workbook.
 
    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.load_workbook('example.xlsx')
    >>> wb.get_sheet_names()
    ['Sheet1', 'Sheet2', 'Sheet3']
    >>> sheet = wb.get_sheet_by_name('Sheet3')    ---> returns Worksheet object (sheet representation in program)
    >>> sheet
    <Worksheet "Sheet3">
    >>> type(sheet) 
    <class 'openpyxl.worksheet.worksheet.Worksheet'>
    >>> sheet.title        ----> returns sheet name
    'Sheet3'
    >>> anotherSheet = wb.active    ----> returns active sheet of workbook
    >>> anotherSheet
    <Worksheet "Sheet1">
 
 
 # Getting Cells from the Sheets:
 --------------------------------
 -> Once you have a Worksheet object, you can access a Cell object by its name.
 
    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.load_workbook('example.xlsx')
    >>> sheet = wb.get_sheet_by_name('Sheet1')
    >>> sheet['A1']
    <Cell Sheet1.A1>
    >>> sheet['A1'].value
    datetime.datetime(2015, 4, 5, 13, 34, 2)
    >>> c = sheet['B1']
    >>> c.value
    'Apples'
    >>> 'Row ' + str(c.row) + ', Column ' + c.column + ' is ' + c.value
    'Row 1, Column B is Apples'
    >>> 'Cell ' + c.coordinate + ' is ' + c.value
    'Cell B1 is Apples'
    >>> sheet['C1'].value
    73
 
    Note: 
    1. OpenPyXL will automatically interpret the dates in column A and return them as datetime values rather 
       than strings.
    
    2. Specifying a column by letter can be tricky to program, especially because after column Z, the columns 
       start 
       by using two letters: AA, AB, AC, and so on. As an alternative, you can also get a cell using the sheet’s 
       cell() method and passing integers for its row and column keyword arguments. The first row or column 
       integer is 1, not 0.
 
     Eg:
     >>> sheet.cell(row=1, column=2)
     <Cell Sheet1.B1>
     >>> sheet.cell(row=1, column=2).value
     'Apples'
     >>> for i in range(1, 8, 2):
             print(i, sheet.cell(row=i, column=2).value)
     
     1 Apples
     3 Pears
     5 Apples
     7 Strawberries
     
 -> We can determine the size of the sheet with the Worksheet object’s max_row and max_column member variables.
   
    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.load_workbook('example.xlsx')
    >>> sheet = wb.get_sheet_by_name('Sheet1')
    >>> sheet.max_row
    7
    >>> sheet.max_column
    3
 
 
 # Converting Between Column Letters and Numbers:
 ------------------------------------------------
 -> openpyxl.utils.column_index_from_string(): To convert from letters to numbers
 -> openpyxl.utils.get_column_letter(): To convert from numbers to letters
 
    Eg:
    >>> import openpyxl
    >>> from openpyxl.utils import get_column_letter, column_index_from_string
    >>> get_column_letter(1)
    'A'
    >>> get_column_letter(2)
    'B'
    >>> get_column_letter(27)
    'AA'
    >>> get_column_letter(900)
    'AHP'
    >>> wb = openpyxl.load_workbook('example.xlsx')
    >>> sheet = wb.get_sheet_by_name('Sheet1')
    >>> get_column_letter(sheet.max_column)
    'C'
    >>> column_index_from_string('A')
    1
    >>> column_index_from_string('AA')
    27
 
 
 # Getting Rows and Columns from the Sheets:
 -------------------------------------------
 -> You can slice Worksheet objects to get all the Cell objects in a row, column, or rectangular area of the     
    spreadsheet.
    
    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.load_workbook('example.xlsx')
    >>> sheet = wb.get_sheet_by_name('Sheet1')
    >>> tuple(sheet['A1':'C3'])
    ((<Cell Sheet1.A1>, <Cell Sheet1.B1>, <Cell Sheet1.C1>), (<Cell Sheet1.A2>,
    <Cell Sheet1.B2>, <Cell Sheet1.C2>), (<Cell Sheet1.A3>, <Cell Sheet1.B3>,
    <Cell Sheet1.C3>))
    >>> for rowOfCellObjects in sheet['A1':'C3']:
            for cellObj in rowOfCellObjects:
                print(cellObj.coordinate, cellObj.value)
            print('--- END OF ROW ---')
    A1 2015-04-05 13:34:02
    B1 Apples
    C1 73
    --- END OF ROW ---
    A2 2015-04-05 03:41:23
    B2 Cherries
    C2 85
    --- END OF ROW ---
    A3 2015-04-06 12:46:51
    B3 Pears
    C3 14
    --- END OF ROW ---
 
 -> To access the values of cells in a particular row or column, we can also use a Worksheet object’s rows and 
    columns attribute.
    
    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.load_workbook('example.xlsx')
    >>> sheet = wb.active
    >>> sheet.columns[1]
    (<Cell Sheet1.B1>, <Cell Sheet1.B2>, <Cell Sheet1.B3>, <Cell Sheet1.B4>,
    <Cell Sheet1.B5>, <Cell Sheet1.B6>, <Cell Sheet1.B7>)
    >>> for cellObj in sheet.columns[1]:
            print(cellObj.value)
    

# Writing Excel Documents:
--------------------------

 # Creating and Saving Excel Documents:
 --------------------------------------
 -> Call the openpyxl.Workbook() function to create a new, blank Workbook object.
 
    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.Workbook()
    >>> wb.get_sheet_names()
    ['Sheet']
    >>> sheet = wb.active
    >>> sheet.title
    'Sheet'
    >>> sheet.title = 'Spam Bacon Eggs Sheet'
    >>> wb.get_sheet_names()
    ['Spam Bacon Eggs Sheet']
    
 -> The workbook will start off with a single sheet named Sheet. You can change the name of the sheet by storing a 
    new string in its title attribute.
 -> After any modification call save() method to save the spreadsheet.
 
    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.load_workbook('example.xlsx')
    >>> sheet = wb.active
    >>> sheet.title = 'Spam Spam Spam'
    >>> wb.save('example_copy.xlsx')
    
    Note:  Passing a different filename than the original, such as 'example_copy.xlsx', saves the changes to a 
           copy of the spreadsheet.(recommended)

 # Creating and Removing Sheets:
 -------------------------------
 -> create_sheet() : To add new sheet to workbook.
 -> remove_sheet() : to remove a sheet from workbook.
 
    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.Workbook()
    >>> wb.get_sheet_names()
    ['Sheet']
    >>> wb.create_sheet()    ---> returns a new Worksheet object
    <Worksheet "Sheet1">
    >>> wb.get_sheet_names()
    ['Sheet', 'Sheet1']
    >>> wb.create_sheet(index=0, title='First Sheet')
    <Worksheet "First Sheet">
    >>> wb.get_sheet_names()
    ['First Sheet', 'Sheet', 'Sheet1']
    >>> wb.create_sheet(index=2, title='Middle Sheet')
    <Worksheet "Middle Sheet">
    >>> wb.get_sheet_names()
    ['First Sheet', 'Sheet', 'Middle Sheet', 'Sheet1']
   
    >>> wb.remove_sheet(wb.get_sheet_by_name('Middle Sheet'))
    >>> wb.remove_sheet(wb.get_sheet_by_name('Sheet1'))
    >>> wb.get_sheet_names()
    ['First Sheet', 'Sheet']
 
    Note: The remove_sheet() method takes a Worksheet object, not a string of the sheet name, as its argument.


 # Writing Values to Cells:
 --------------------------
 -> Writing values to cells is much like writing values to keys in a dictionary.
 
    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.Workbook()
    >>> sheet = wb.get_sheet_by_name('Sheet')
    >>> sheet['A1'] = 'Hello world!'
    >>> sheet['A1'].value
    'Hello world!'


# Setting the Font Style of Cells:
----------------------------------
-> To customize font styles in cells, important, import the Font() function from the openpyxl.styles module.

   Eg:
     >>> import openpyxl
     >>> from openpyxl.styles import Font
     >>> wb = openpyxl.Workbook()
     >>> sheet = wb.get_sheet_by_name('Sheet')
     >>> italic24Font = Font(size=24, italic=True)
     >>> sheet['A1'].font = italic24Font
     >>> sheet['A1'] = 'Hello world!'
     >>> wb.save('styled.xlsx')
   
 
 # Font Objects:
 ---------------
 -> keyword arguments: 
     name   --> String  --> Eg: 'Calibri' or 'Times New Roman'
     size   --> Integer
     bold   --> Boolean
     italic --> Boolean
     
     Eg: Font(name='Calibri', size=24, bold=True, italic=True)


# Formulas:
-----------

Eg: Sets the B9 cell to a formula that calculates the sum of values in cells B1 to B8
>>> sheet['B9'] = '=SUM(B1:B8)'


# Adjusting Rows and Columns:
-----------------------------

 # Setting Row Height and Column Width:
 --------------------------------------
 Eg:
 >>> import openpyxl
 >>> wb = openpyxl.Workbook()
 >>> sheet = wb.active
 >>> sheet['A1'] = 'Tall row'
 >>> sheet['B2'] = 'Wide column'
 >>> sheet.row_dimensions[1].height = 70
 >>> sheet.column_dimensions['B'].width = 20
 >>> wb.save('dimensions.xlsx')

 Note:
    1. The row height can be set to an integer or float value between 0 and 409. Default row height is 12.75. 
    2. The column width can be set to an integer or float value between 0 and 255. Default column width is 8.43 
       characters.


 # Merging and Unmerging Cells:
 ------------------------------
 -> A rectangular area of cells can be merged into a single cell with the merge_cells() sheet method.
 
    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.Workbook()
    >>> sheet = wb.active
    >>> sheet.merge_cells('A1:D3')
    >>> sheet['A1'] = 'Twelve cells merged together.'
    >>> sheet.merge_cells('C5:D5')
    >>> sheet['C5'] = 'Two merged cells.'
    >>> wb.save('merged.xlsx')
    
  -> To unmerge cells, call the unmerge_cells() sheet method.
  
     Eg:
     >>> sheet.unmerge_cells('A1:D3')


 # Freeze Panes:
 ---------------
 -> For spreadsheets too large to be displayed all at once, it’s helpful to “freeze” a few of the top rows or 
    leftmost columns onscreen.

 -> To unfreeze all panes, set freeze_panes to None or 'A1'.
 
    freeze_panes setting            Rows and columns frozen
    --------------------            -----------------------
    sheet.freeze_panes = 'A2'        Row 1
    sheet.freeze_panes = 'B1'        Column A
    sheet.freeze_panes = 'C1'        Columns A and B
    sheet.freeze_panes = 'C2'        Row 1 and columns A and B
    sheet.freeze_panes = 'A1'        No frozen panes
    or sheet.freeze_panes = None

    Eg:
    >>> import openpyxl
    >>> wb = openpyxl.load_workbook('produceSales.xlsx')
    >>> sheet = wb.active
    >>> sheet.freeze_panes = 'A2'
    >>> wb.save('freezeExample.xlsx')
    

# Charts:
---------
-> OpenPyXL supports creating bar, line, scatter, and pie charts using the data in a sheet’s cells.

[read whenever needed]


--------------------------------------------The End-------------------------------------------------------------
