# Working with PDF and word Documents:
--------------------------------------
-> PDF and Word documents are binary files, which makes them much more complex than plaintext files. In addition to text, 
   they store lots of font, color, and layout information.


# PDF Documents:
----------------
-> Module used: PyPDF2
-> installation: pip3 install PyPDF2


# Extracting Text from PDFs:
----------------------------
-> PyPDF2 does not have a way to extract images, charts, or other media from PDF documents, but it can extract text and 
   return it as a Python string.

   Eg:
   >>> import PyPDF2
   >>> pdfFileObj = open('meetingminutes.pdf', 'rb')
   >>> pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
   >>> pdfReader.numPages
   19
   >>> pageObj = pdfReader.getPage(0)
   >>> pageObj.extractText()
   'OOFFFFIICCIIAALL BBOOAARRDD MMIINNUUTTEESS Meeting of March 7, 2015
   \n     The Board of Elementary and Secondary Education shall provide leadership
   and create policies for education that expand opportunities for children,
   empower families and communities, and advance Louisiana in an increasingly
   competitive global market. BOARD of ELEMENTARY and SECONDARY EDUCATION '


# Decrypting PDFs:
------------------
-> Password protected pdf file.

   Eg:
   >>> import PyPDF2
   >>> pdfReader = PyPDF2.PdfFileReader(open('encrypted.pdf', 'rb'))
   >>> pdfReader.isEncrypted
   True
   
   >>> pdfReader.getPage(0)
   Traceback (most recent call last):
     File "<pyshell#173>", line 1, in <module>
       pdfReader.getPage()
     --snip--
     File "C:\Python34\lib\site-packages\PyPDF2\pdf.py", line 1173, in getObject
       raise utils.PdfReadError("file has not been decrypted")
   PyPDF2.utils.PdfReadError: file has not been decrypted
   
   >>> pdfReader.decrypt('rosebud')
   1
   >>> pageObj = pdfReader.getPage(0)

Note: if you get any error while running [pdfReader.getPage(0)] find solution here
		https://github.com/mstamy2/PyPDF2/pull/359/commits/f80eb5f5d53a8f6f61c3b4f3ea2cbadc6abb3d5a


# Creating PDFs:
----------------
-> PdfFileWriter() used to create pdf.
-> PyPDF2 cannot write arbitrary text to a PDF like Python can do with plaintext files.
-> PyPDF2 doesn’t allow you to directly edit a PDF instead create new one.

 # Copying Pages:
 ----------------

	Eg:
 	>>> import PyPDF2
    >>> pdf1File = open('meetingminutes.pdf', 'rb')
    >>> pdf2File = open('meetingminutes2.pdf', 'rb')
    >>> pdf1Reader = PyPDF2.PdfFileReader(pdf1File)
    >>> pdf2Reader = PyPDF2.PdfFileReader(pdf2File)
    >>> pdfWriter = PyPDF2.PdfFileWriter()
 
    >>> for pageNum in range(pdf1Reader.numPages):
            pageObj = pdf1Reader.getPage(pageNum)
            pdfWriter.addPage(pageObj)
 
    >>> for pageNum in range(pdf2Reader.numPages):
            pageObj = pdf2Reader.getPage(pageNum)
            pdfWriter.addPage(pageObj)
 
    >>> pdfOutputFile = open('combinedminutes.pdf', 'wb')
    >>> pdfWriter.write(pdfOutputFile)
    >>> pdfOutputFile.close()
    >>> pdf1File.close()
    >>> pdf2File.close()


# Rotating Pages:
-----------------

   Eg:
   >>> import PyPDF2
   >>> minutesFile = open('meetingminutes.pdf', 'rb')
   >>> pdfReader = PyPDF2.PdfFileReader(minutesFile)
   >>> page = pdfReader.getPage(0)
   >>> page.rotateClockwise(90)
   {'/Contents': [IndirectObject(961, 0), IndirectObject(962, 0),
   --snip--
   }
   >>> pdfWriter = PyPDF2.PdfFileWriter()
   >>> pdfWriter.addPage(page)
   >>> resultPdfFile = open('rotatedPage.pdf', 'wb')
   >>> pdfWriter.write(resultPdfFile)
   >>> resultPdfFile.close()
   >>> minutesFile.close()


# Overlaying Pages:
-------------------
-> Adding logo, timestamp, or watermark [ie; merging two pages, one on top of another]

   Eg:
   >>> import PyPDF2
   >>> minutesFile = open('meetingminutes.pdf', 'rb')
   >>> pdfReader = PyPDF2.PdfFileReader(minutesFile)
   >>> minutesFirstPage = pdfReader.getPage(0)
   >>> pdfWatermarkReader = PyPDF2.PdfFileReader(open('watermark.pdf', 'rb'))
   >>> minutesFirstPage.mergePage(pdfWatermarkReader.getPage(0))
   >>> pdfWriter = PyPDF2.PdfFileWriter()
   >>> pdfWriter.addPage(minutesFirstPage)

   >>> for pageNum in range(1, pdfReader.numPages):
           pageObj = pdfReader.getPage(pageNum)
           pdfWriter.addPage(pageObj)
   >>> resultPdfFile = open('watermarkedCover.pdf', 'wb')
   >>> pdfWriter.write(resultPdfFile)
   >>> minutesFile.close()
   >>> resultPdfFile.close()


# Encrypting PDFs:
------------------
-> pdfWriter.encrypt(<password_string>): method to encrypt pdf.

	Eg:
	>>> import PyPDF2
    >>> pdfFile = open('meetingminutes.pdf', 'rb')
    >>> pdfReader = PyPDF2.PdfFileReader(pdfFile)
    >>> pdfWriter = PyPDF2.PdfFileWriter()
    >>> for pageNum in range(pdfReader.numPages):
            pdfWriter.addPage(pdfReader.getPage(pageNum))
 
    >>> pdfWriter.encrypt('swordfish')
    >>> resultPdf = open('encryptedminutes.pdf', 'wb')
    >>> pdfWriter.write(resultPdf)
    >>> resultPdf.close()

Note: PDFs can have a user password (allowing you to view the PDF) and an owner password (allowing you to set permissions 
	  for printing, commenting, extracting text, and other features). The user password and owner password are the first and 
	  second arguments to encrypt(), respectively. If only one string argument is passed to encrypt(), it will be used for 
	  both passwords.
---------------------------------------------------------------------------------------------------------------------------


# Word Documents:
-----------------
-> File extension: .docx
-> module: python-docx
-> installation: pip install python-docx

  Note: you’ll need to run import docx, not import python-docx.

-> Structure of Word Document:
    Document object --> list of Paragraph objects[ENTER] --> list of one or more Run objects

    * Document object: represents the entire document.
    * Run object is a contiguous run of text with the same style.
    

 # Reading Word Documents:
 -------------------------
  Eg:
  >>> import docx
  >>> doc = docx.Document('demo.docx')
  >>> len(doc.paragraphs)
   7
  >>> doc.paragraphs[0].text
   'Document Title'
  >>> doc.paragraphs[1].text
   'A plain paragraph with some bold and some italic'
  >>> len(doc.paragraphs[1].runs)
   4
  >>> doc.paragraphs[1].runs[0].text
   'A plain paragraph with some '
  >>> doc.paragraphs[1].runs[1].text
   'bold'
  >>> doc.paragraphs[1].runs[2].text
   ' and some '
  >>> doc.paragraphs[1].runs[3].text
   'italic'


 # Getting the Full Text from a .docx File:
 ------------------------------------------
 -> get entire text of file without styling.

  Eg: 
  filename: readDocx.py
  ---------------------
  #! python3

  import docx
  
  def getText(filename):
      doc = docx.Document(filename)
      fullText = []
      for para in doc.paragraphs:
          fullText.append(para.text)
      return '\n'.join(fullText)
  
 -> Now the readDocx.py program can be imported like any other module. :)


 # Styling Paragraph and Run Objects:
 ------------------------------------
 1. Paragraph styles : applied to Paragraph objects
 2. character styles : applied to Run objects
 3. linked styles : applied to both kinds of objects

 -> String for default style values:
    'Quote', 'Normal', 'Heading5', 'ListBullet', 'ListParagraph', 'BodyText', 'Heading6' etc

 Eg-1:
 paragraphObj.style = 'Quote'

 Note: When using a linked style for a Run object, you will need to add 'Char' to the end of its name.

 Eg-2:
 runObj.style = 'QuoteChar'

  
 # Run Attributes:
 -----------------
 -> Runs can be further styled using text attributes.
 -> values: True, False, None(will take default value set)

 ->attributes: bold, italic, underline, strike, double_strike, all_caps, small_caps, shadow, outline, rtl, imprint, emboss   
  
  Eg:
  >>> doc = docx.Document('demo.docx')
  >>> doc.paragraphs[0].text
  'Document Title'
  >>> doc.paragraphs[0].style
  'Title'
  >>> doc.paragraphs[0].style = 'Normal'
  >>> doc.paragraphs[1].text
  'A plain paragraph with some bold and some italic'
  >>> (doc.paragraphs[1].runs[0].text, doc.paragraphs[1].runs[1].text, doc.
  paragraphs[1].runs[2].text, doc.paragraphs[1].runs[3].text)
  ('A plain paragraph with some ', 'bold', ' and some ', 'italic')
  >>> doc.paragraphs[1].runs[0].style = 'QuoteChar'
  >>> doc.paragraphs[1].runs[1].underline = True
  >>> doc.paragraphs[1].runs[3].underline = True
  >>> doc.save('restyled.docx')


 # Writing Word Documents:
 -------------------------
 -> add_paragraph() : adds new paragraph.
 -> add_run() : add text to the end of an existing paragraph.

  Eg:
  >>> import docx
  >>> doc = docx.Document()
  >>> doc.add_paragraph('Hello world!')
  <docx.text.Paragraph object at 0x000000000366AD30>
  >>> paraObj1 = doc.add_paragraph('This is a second paragraph.')
  >>> paraObj2 = doc.add_paragraph('This is a yet another paragraph.')
  >>> paraObj1.add_run(' This text is being added to the second paragraph.')
  <docx.text.Run object at 0x0000000003A2C860>
  >>> doc.save('multipleParagraphs.docx')

 -> Both add_paragraph() and add_run() accept an optional second argument that is a string of the Paragraph or Run object’s 
    style.

    Eg:
    >>> doc.add_paragraph('Hello world!', 'Title')

 
 # Adding Headings:
 ------------------
 -> add_heading(<heading name>, <style_number/0/1/2/3/4>)
 -> The integer 0 makes the heading the Title style.

  Eg:
  >>> doc = docx.Document()
  >>> doc.add_heading('Header 0', 0)
  <docx.text.Paragraph object at 0x00000000036CB3C8>
  >>> doc.add_heading('Header 1', 1)
  <docx.text.Paragraph object at 0x00000000036CB630>
  >>> doc.save('headings.docx')


 # Adding Line and Page Breaks:
 ------------------------------
 -> add_break(): call on run object to add line break.
 -> add_break(docx.text.WD_BREAK.PAGE) : call on run object to add page break.

    Eg:
    >>> doc = docx.Document()
    >>> doc.add_paragraph('This is on the first page!')
    <docx.text.Paragraph object at 0x0000000003785518>
    >>> doc.paragraphs[0].runs[0].add_break(docx.text.WD_BREAK.PAGE)
    >>> doc.add_paragraph('This is on the second page!')
    <docx.text.Paragraph object at 0x00000000037855F8>
    >>> doc.save('twoPage.docx')


 # Adding Pictures:
 ------------------

  Eg:
  >>> doc.add_picture('zophie.png', width=docx.shared.Inches(1),
  height=docx.shared.Cm(4))
  <docx.shape.InlineShape object at 0x00000000036C7D30>


---------------------------------------------------The End-----------------------------------------------------------------